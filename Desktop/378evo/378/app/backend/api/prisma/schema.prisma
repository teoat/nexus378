// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  hashedPassword  String
  fullName        String?
  roles           String[]  @default(["investigator"])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  cases                  Case[]
  evidence               Evidence[]
  auditLogs              AuditLog[]
  columnMappingTemplates ColumnMappingTemplate[]
  caseSnapshots          CaseSnapshot[]
  reports                Report[]
  progress               UserProgress[]
}

model Case {
  id                  String        @id @default(uuid())
  caseName            String
  description         String?
  status              String        @default("new")
  leadInvestigator    User?         @relation(fields: [leadInvestigatorId], references: [id])
  leadInvestigatorId  String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  transactions        Transaction[]
  columnMappingTemplates ColumnMappingTemplate[]
  reconciliationJobs     ReconciliationJob[]
  discrepancies       Discrepancy[]
  evidence            Evidence[]
  matchingResults     MatchingResult[]
  fraudAlerts         FraudAlert[]
  snapshots           CaseSnapshot[]
  reports             Report[]
}

model Transaction {
  id               BigInt           @id @default(autoincrement())
  case             Case             @relation(fields: [caseId], references: [id])
  caseId           String
  transactionDate  DateTime?
  description      String?
  amount           Float?
  currency         String?
  additionalData   Json?
  rawData          Json?
  createdAt        DateTime         @default(now())
  evidence         Evidence[]
  matchingResultsA MatchingResult[] @relation("TransactionA")
  matchingResultsB MatchingResult[] @relation("TransactionB")
  fraudAlerts      FraudAlert[]

  @@index([caseId, transactionDate])
}

model ColumnMappingTemplate {
  id            String    @id @default(uuid())
  templateName  String
  mappings      Json
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  case          Case?     @relation(fields: [caseId], references: [id])
  caseId        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, templateName])
}

model Discrepancy {
  id          Int       @id @default(autoincrement())
  case        Case      @relation(fields: [caseId], references: [id])
  caseId      String
  type        String
  description String
  status      String    @default("open")
  dataDetails Json?
  createdAt   DateTime  @default(now())
}

model Evidence {
  id              String      @id @default(uuid())
  case            Case        @relation(fields: [caseId], references: [id])
  caseId          String
  transaction     Transaction? @relation(fields: [transactionId], references: [id])
  transactionId   BigInt?
  fileName        String
  fileStorageKey  String
  description     String?
  uploadedBy      User?       @relation(fields: [uploadedById], references: [id])
  uploadedById    String?
  createdAt       DateTime    @default(now())
}

model MatchingResult {
  id               BigInt      @id @default(autoincrement())
  case             Case        @relation(fields: [caseId], references: [id])
  caseId           String
  transactionA     Transaction @relation("TransactionA", fields: [transactionAId], references: [id])
  transactionAId   BigInt
  transactionB     Transaction @relation("TransactionB", fields: [transactionBId], references: [id])
  transactionBId   BigInt
  matchScore       Float
  rationale        String?
  matchingStrategy String?
  isConfirmed      Boolean?
  createdAt        DateTime    @default(now())
}

model ReconciliationJob {
  id        String   @id @default(uuid())
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  status    String   @default("pending") // pending, in_progress, complete, failed
  scope     String
  scopeValue String?
  results   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FraudAlert {
  id            BigInt      @id @default(autoincrement())
  case          Case        @relation(fields: [caseId], references: [id])
  caseId        String
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId BigInt?
  ruleId        String
  description   String
  severity      String
  status        String      @default("new")
  createdAt     DateTime    @default(now())
}

model AuditLog {
  id        BigInt    @id @default(autoincrement())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  details   Json?
  ipAddress String?
  createdAt DateTime  @default(now())
}

model CaseSnapshot {
  id          String   @id @default(uuid())
  case        Case     @relation(fields: [caseId], references: [id])
  caseId      String
  snapshot    Json
  description String?
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?
  createdAt   DateTime @default(now())
}

model HelpAgentFeedback {
  id           String   @id @default(uuid())
  userId       String
  suggestionId String // An identifier for the suggestion that was shown
  feedback     String   // e.g., "helpful", "unhelpful", "inaccurate"
  context      Json?    // The user context when the suggestion was given
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([suggestionId])
}

model Report {
  id          String   @id @default(uuid())
  name        String
  description String?
  configuration Json
  case        Case     @relation(fields: [caseId], references: [id])
  caseId      String
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TrainingModule {
  id          String   @id @default(uuid())
  name        String
  description String?
  content     Json
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userProgress UserProgress[]
}

model UserProgress {
  id         String         @id @default(uuid())
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  module     TrainingModule @relation(fields: [moduleId], references: [id])
  moduleId   String
  completed  Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model HelpAgentFeedback {
  id           String   @id @default(uuid())
  userId       String
  suggestionId String
  feedback     String
  context      Json?
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([suggestionId])
}
