services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: forensic_postgres_prod
    restart: always
    env_file: .env.prod
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: forensic_neo4j_prod
    restart: always
    env_file: .env.prod
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:7474/browser/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache and Queue
  redis:
    image: redis:7-alpine
    container_name: forensic_redis_prod
    restart: always
    env_file: .env.prod
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    command: redis-server --requirepass $$REDIS_PASSWORD
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: forensic_rabbitmq_prod
    restart: always
    env_file: .env.prod
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: forensic_minio_prod
    restart: always
    env_file: .env.prod
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - forensic_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile.prod
    image: forensic_reconciliation_app-api_gateway:${IMAGE_TAG:-latest}
    container_name: forensic_api_gateway_prod
    restart: always
    env_file: .env.prod
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    ports:
      - "8080:8080"
      - "8443:8443"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Service
  ai_service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile.prod
    image: forensic_reconciliation_app-ai_service:${IMAGE_TAG:-latest}
    container_name: forensic_ai_service_prod
    restart: always
    env_file: .env.prod
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    volumes:
      - ai_service_data:/app/data
      - ai_service_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    image: forensic_reconciliation_app-frontend:${IMAGE_TAG:-latest}
    container_name: forensic_frontend_prod
    restart: always
    env_file: .env.prod
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      api_gateway:
        condition: service_healthy
    networks:
      - forensic_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: forensic_prometheus_prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: forensic_grafana_prod
    restart: always
    env_file: .env.prod
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://127.0.0.1:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: forensic_elasticsearch_prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: forensic_kibana_prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  minio_data:
    driver: local
  ai_service_data:
    driver: local
  ai_service_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  forensic_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
