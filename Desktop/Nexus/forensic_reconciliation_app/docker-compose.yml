version: '3.8'

services:
  # PostgreSQL - Metadata and Audit Logs
  postgres:
    image: postgres:15-alpine
    container_name: forensic_postgres
    environment:
      POSTGRES_DB: forensic_reconciliation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding#UTF-8 --lc-collate#C --lc-ctype#C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./datastore/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Neo4j - Graph Database for Fraud Analysis
  neo4j:
    image: neo4j:5.15-community
    container_name: forensic_neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-secure_password}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries#1 --spider http://localhost:7474/browser/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis - Caching and Message Queues
  redis:
    image: redis:7-alpine
    container_name: forensic_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_password} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # RabbitMQ - Message Queue for AI Agent Communication
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: forensic_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-secure_password}
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # DuckDB - OLAP Engine for Reconciliation (File-based, no container needed)
  # DuckDB runs as a library within the application

  # Redis Commander - Redis Management UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: forensic_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-secure_password}
    ports:
      - "8081:8081"
    networks:
      - forensic_network
    depends_on:
      - redis
    restart: unless-stopped

  # pgAdmin - PostgreSQL Management UI
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: forensic_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@forensic.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    networks:
      - forensic_network
    depends_on:
      - postgres
    restart: unless-stopped

  # MinIO - Object Storage for Evidence Files
  minio:
    image: minio/minio:latest
    container_name: forensic_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_DOMAIN: localhost
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Elasticsearch - Full-text Search and Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: forensic_elasticsearch
    environment:
      - discovery.type#single-node
      - xpack.security.enabled#false
      - "ES_JAVA_OPTS#-Xms1g -Xmx1g"
      - cluster.routing.allocation.disk.threshold_enabled#false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Kibana - Elasticsearch Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: forensic_kibana
    environment:
      - ELASTICSEARCH_HOSTS#http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - forensic_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: forensic_prometheus
    command:
      - '--config.file#/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path#/prometheus'
      - '--web.console.libraries#/etc/prometheus/console_libraries'
      - '--web.console.templates#/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time#200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - forensic_network
    restart: unless-stopped

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: forensic_grafana
    environment:
      - GF_SECURITY_ADMIN_USER#admin
      - GF_SECURITY_ADMIN_PASSWORD#${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP#false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - forensic_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: forensic_jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED#true
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP
      - "14250:14250"  # gRPC
    networks:
      - forensic_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local
  pgadmin_data:
    driver: local
  minio_data:
    driver: local
  elasticsearch_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  forensic_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
