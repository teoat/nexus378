# Forensic Reconciliation + Fraud Platform - Docker Environment
# Comprehensive infrastructure setup for all services

version: '3.8'

services:
  # PostgreSQL 15+ - Metadata & Audit Storage
  postgres:
    image: postgres:15-alpine
    container_name: nexus_postgres
    environment:
      POSTGRES_DB: nexus_forensics
      POSTGRES_USER: nexus_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_in_prod}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./datastore/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - nexus_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus_user -d nexus_forensics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j 5+ - Fraud Pattern Detection
  neo4j:
    image: neo4j:5-community
    container_name: nexus_neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-secure_password_change_in_prod}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
      NEO4J_dbms_memory_heap_initial__size: 2G
      NEO4J_dbms_memory_heap_max__size: 4G
      NEO4J_dbms_memory_pagecache_size: 2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    networks:
      - nexus_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 7+ - Caching & Message Queues
  redis:
    image: redis:7-alpine
    container_name: nexus_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_password_change_in_prod}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - nexus_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ - Multi-Agent Orchestration
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: nexus_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-nexus_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-secure_password_change_in_prod}
      RABBITMQ_DEFAULT_VHOST: nexus_forensics
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    networks:
      - nexus_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO - Immutable Evidence Storage
  minio:
    image: minio/minio:latest
    container_name: nexus_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-nexus_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-secure_password_change_in_prod}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - nexus_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DuckDB - OLAP Reconciliation Engine
  duckdb:
    image: ghcr.io/duckdb/duckdb:latest
    container_name: nexus_duckdb
    volumes:
      - duckdb_data:/data
      - ./datastore/duckdb:/workspace
    working_dir: /workspace
    command: /bin/sh -c "tail -f /dev/null"  # Keep container running
    networks:
      - nexus_network
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: nexus_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - nexus_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: nexus_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-secure_password_change_in_prod}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - nexus_network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch - Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: nexus_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - nexus_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: nexus_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    volumes:
      - kibana_data:/usr/share/kibana/data
    ports:
      - "5601:5601"
    networks:
      - nexus_network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Service - Python AI Layer
  ai_service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: nexus_ai_service
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=nexus_forensics
      - POSTGRES_USER=nexus_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_in_prod}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-secure_password_change_in_prod}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-secure_password_change_in_prod}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER:-nexus_user}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-secure_password_change_in_prod}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-nexus_admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-secure_password_change_in_prod}
    volumes:
      - ./ai_service:/app
      - ai_service_data:/app/data
    ports:
      - "8000:8000"
    networks:
      - nexus_network
    restart: unless-stopped
    depends_on:
      - postgres
      - neo4j
      - redis
      - rabbitmq
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway - Node.js Gateway
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: nexus_gateway
    environment:
      - NODE_ENV=development
      - PORT=3000
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=nexus_forensics
      - POSTGRES_USER=nexus_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_in_prod}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-secure_password_change_in_prod}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER:-nexus_user}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-secure_password_change_in_prod}
      - AI_SERVICE_URL=http://ai_service:8000
    volumes:
      - ./gateway:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - nexus_network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - ai_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  rabbitmq_data:
  minio_data:
  duckdb_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  kibana_data:
  ai_service_data:

networks:
  nexus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
