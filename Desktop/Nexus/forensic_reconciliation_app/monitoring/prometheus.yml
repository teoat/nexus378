# Forensic Reconciliation + Fraud Platform - Prometheus Configuration
# Comprehensive monitoring setup for all services

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    platform: "nexus-forensics"
    environment: "development"

# Alerting rules
rule_files:
  - "alerts/*.yml"

# Alert manager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Scrape configurations
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    metrics_path: /metrics
    scrape_interval: 15s

  # AI Service monitoring
  - job_name: 'ai-service'
    static_configs:
      - targets: ['ai_service:8000']
    metrics_path: /metrics
    scrape_interval: 15s
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # API Gateway monitoring
  - job_name: 'gateway'
    static_configs:
      - targets: ['gateway:3000']
    metrics_path: /metrics
    scrape_interval: 15s
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # PostgreSQL monitoring (if using postgres_exporter)
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres:5432']
    metrics_path: /metrics
    scrape_interval: 30s
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # Redis monitoring (if using redis_exporter)
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    metrics_path: /metrics
    scrape_interval: 30s
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # RabbitMQ monitoring
  - job_name: 'rabbitmq'
    static_configs:
      - targets: ['rabbitmq:15672']
    metrics_path: /metrics
    scrape_interval: 30s
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # Node.js application metrics
  - job_name: 'nodejs'
    static_configs:
      - targets: ['gateway:3000']
    metrics_path: /metrics
    scrape_interval: 15s
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # Python application metrics
  - job_name: 'python'
    static_configs:
      - targets: ['ai_service:8000']
    metrics_path: /metrics
    scrape_interval: 15s
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # Docker container metrics
  - job_name: 'docker'
    static_configs:
      - targets: ['localhost:9323']
    metrics_path: /metrics
    scrape_interval: 30s
    scrape_timeout: 10s

  # System metrics (if using node_exporter)
  - job_name: 'node'
    static_configs:
      - targets: ['localhost:9100']
    metrics_path: /metrics
    scrape_interval: 30s
    scrape_timeout: 10s

# Storage configuration
storage:
  tsdb:
    retention.time: 30d
    retention.size: 10GB
    path: /prometheus
    wal:
      retention.period: 2h

# Remote write configuration (optional - for long-term storage)
remote_write:
  - url: "http://remote-storage:9201/write"
    remote_timeout: 30s
    write_relabel_configs:
      - source_labels: [__name__]
        regex: '.*'
        action: keep

# Remote read configuration (optional - for long-term storage)
remote_read:
  - url: "http://remote-storage:9201/read"
    remote_timeout: 30s
    read_recent: true
