name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  API_GATEWAY_IMAGE: ${{ github.repository }}/api-gateway
  AI_SERVICE_IMAGE: ${{ github.repository }}/ai-service

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, ai-service]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        if: matrix.service == 'api-gateway'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api_gateway/package-lock.json

      - name: Set up Python
        if: matrix.service == 'ai-service'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (API Gateway)
        if: matrix.service == 'api-gateway'
        working-directory: api_gateway
        run: npm ci

      - name: Install dependencies (AI Service)
        if: matrix.service == 'ai-service'
        working-directory: ai_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting (API Gateway)
        if: matrix.service == 'api-gateway'
        working-directory: api_gateway
        run: |
          npm run lint
          npm run format:check

      - name: Run linting (AI Service)
        if: matrix.service == 'ai-service'
        working-directory: ai_service
        run: |
          black --check .
          isort --check-only .
          flake8 .
          mypy .

      - name: Run tests with coverage
        working-directory: ${{ matrix.service == 'api-gateway' && 'api_gateway' || 'ai_service' }}
        run: |
          if [ "${{ matrix.service }}" == "api-gateway" ]; then
            npm run test:coverage
          else
            pytest --cov=. --cov-report=xml
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ${{ matrix.service == 'api-gateway' && 'api_gateway/coverage/coverage.xml' || 'ai_service/coverage.xml' }}
          flags: ${{ matrix.service }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, ai-service]
    steps:
      - uses: actions/checkout@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        if: matrix.service == 'api-gateway'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        if: matrix.service == 'ai-service'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '${{ matrix.service == "api-gateway" && "api_gateway" || "ai_service" }}'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

  build:
    name: Build and Push Images
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [api-gateway, ai-service]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service == 'api-gateway' && env.API_GATEWAY_IMAGE || env.AI_SERVICE_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service == 'api-gateway' && 'api_gateway' || 'ai_service' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to staging
        run: |
          helm dependency update helm/forensic-platform
          helm upgrade --install forensic-platform helm/forensic-platform \
            --namespace forensic-platform-staging \
            --create-namespace \
            --set global.environment=staging \
            --set apiGateway.image.tag=develop-${{ github.sha }} \
            --set aiService.image.tag=develop-${{ github.sha }} \
            --wait

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.forensic-platform.com
    steps:
      - uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to production
        run: |
          helm dependency update helm/forensic-platform
          helm upgrade --install forensic-platform helm/forensic-platform \
            --namespace forensic-platform \
            --create-namespace \
            --set global.environment=production \
            --set apiGateway.image.tag=main-${{ github.sha }} \
            --set aiService.image.tag=main-${{ github.sha }} \
            --wait