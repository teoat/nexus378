version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: forensic_postgres
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      - POSTGRES_DB=NEXUS
      - POSTGRES_USER=${POSTGRES_USER:-forensic_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./datastore/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-forensic_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: forensic_neo4j
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_server_memory_heap_max__size=512M
      - NEO4J_server_memory_pagecache_size=256M
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474/browser/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: forensic_redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: forensic_rabbitmq
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-forensic_user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-secure_password_123}
      - RABBITMQ_DEFAULT_VHOST=forensic_vhost
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: forensic_minio
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-forensic_user}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-secure_password_123}
      - MINIO_BROWSER_REDIRECT_URL=${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - forensic_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # API Gateway
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: forensic_api_gateway
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-forensic_user}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/NEXUS
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-forensic_user}:${RABBITMQ_PASSWORD:-secure_password_123}@rabbitmq:5672/forensic_vhost
      - NEO4J_URL=bolt://neo4j:7687
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_USER:-forensic_user}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD:-secure_password_123}
    ports:
      - "3000:3000"
    volumes:
      - ./api_gateway:/app
      - /app/node_modules
    networks:
      - forensic_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # AI Service
  ai_service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: forensic_ai_service
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://${POSTGRES_USER:-forensic_user}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/NEXUS
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-forensic_user}:${RABBITMQ_PASSWORD:-secure_password_123}@rabbitmq:5672/forensic_vhost
      - NEO4J_URL=bolt://neo4j:7687
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_USER:-forensic_user}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD:-secure_password_123}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./ai_service:/app
      - ai_service_data:/app/data
      - ai_service_logs:/app/logs
    networks:
      - forensic_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      minio:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: forensic_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=forensic-cluster
      - node.name=forensic-node
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - forensic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: forensic_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    ports:
      - "5601:5601"
    volumes:
      - kibana_data:/usr/share/kibana/data
    networks:
      - forensic_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Logstash (Optional - for log processing)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: forensic_logstash
    environment:
      - XPACK_MONITORING_ENABLED=false
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - logstash_data:/usr/share/logstash/data
    networks:
      - forensic_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Filebeat (Optional - for log collection)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: forensic_filebeat
    user: root
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./monitoring/filebeat/logs:/var/log/forensic
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - forensic_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

networks:
  forensic_network:
    driver: bridge

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  rabbitmq_data:
  rabbitmq_logs:
  minio_data:
  ai_service_data:
  ai_service_logs:
  elasticsearch_data:
  kibana_data:
  logstash_data:
