# Logstash Pipeline for Forensic Platform Logs
# Processes logs from all services and forwards to Elasticsearch

input {
  # Beats input for log collection
  beats {
    port => 5044
    codec => json
  }
  
  # TCP input for direct log forwarding
  tcp {
    port => 5000
    codec => json_lines
  }
  
  # UDP input for syslog-style logs
  udp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Parse JSON logs
  if [type] == "json" {
    json {
      source => "message"
    }
  }
  
  # Add timestamp if missing
  if ![timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Add service metadata
  if [service] {
    mutate {
      add_field => { "service_name" => "%{[service]}" }
    }
  }
  
  # Parse log levels
  if [level] {
    mutate {
      add_field => { "log_level" => "%{[level]}" }
    }
  }
  
  # Add host information
  mutate {
    add_field => { "host" => "%{[host][name]}" }
    add_field => { "container_id" => "%{[container][id]}" }
  }
  
  # Parse structured logs
  if [message] and [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "log_data"
    }
  }
  
  # Add forensic-specific fields
  if [forensic_case_id] {
    mutate {
      add_field => { "case_id" => "%{[forensic_case_id]}" }
    }
  }
  
  if [user_id] {
    mutate {
      add_field => { "user" => "%{[user_id]}" }
    }
  }
  
  # Parse error messages
  if [error] {
    grok {
      match => { "error" => "%{GREEDYDATA:error_message}" }
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "forensic-logs-%{+YYYY.MM.dd}"
    document_type => "_doc"
    template_name => "forensic-logs"
    template => {
      "index_patterns" => ["forensic-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "service_name" => { "type" => "keyword" }
          "log_level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "case_id" => { "type" => "keyword" }
          "user" => { "type" => "keyword" }
          "error_message" => { "type" => "text" }
          "host" => { "type" => "keyword" }
          "container_id" => { "type" => "keyword" }
        }
      }
    }
  }
  
  # Output to stdout for debugging
  stdout {
    codec => rubydebug
  }
}
