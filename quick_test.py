#!/usr/bin/env python3


    """Test basic imports for all core components
    print("üîç Testing basic imports...")
    
    try:
        import psutil
        print("‚úÖ psutil imported successfully")
    except ImportError:
        print("‚ùå psutil import failed")
        return False
    
    try:
        from queue_manager import QueueManager
        print("‚úÖ QueueManager imported successfully")
    except ImportError:
        print("‚ùå QueueManager import failed")
        return False
    
    try:
        from todo_master_reader import TodoMasterReader
        print("‚úÖ TodoMasterReader imported successfully")
    except ImportError:
        print("‚ùå TodoMasterReader import failed")
        return False
    
    try:
        from collective_worker_processor import CollectiveWorkerProcessor
        print("‚úÖ CollectiveWorkerProcessor imported successfully")
    except ImportError:
        print("‚ùå CollectiveWorkerProcessor import failed")
        return False
    
    try:
        from task_breakdown_engine import TaskBreakdownEngine
        print("‚úÖ TaskBreakdownEngine imported successfully")
    except ImportError:
        print("‚ùå TaskBreakdownEngine import failed")
        return False
    
    try:
        from dynamic_worker_coordinator import DynamicWorkerCoordinator
        print("‚úÖ DynamicWorkerCoordinator imported successfully")
    except ImportError:
        print("‚ùå DynamicWorkerCoordinator import failed")
        return False
    
    try:
        from monitor_collective_system import CollectiveSystemMonitor
        print("‚úÖ CollectiveSystemMonitor imported successfully")
    except ImportError:
        print("‚ùå CollectiveSystemMonitor import failed")
        return False
    
    print("‚úÖ All basic imports successful")
    return True

def test_component_initialization():
    """Test component initialization
    print("üîç Testing component initialization...")
    
    try:
        queue_manager = QueueManager()
        print("‚úÖ QueueManager initialized")
    except Exception as e:
        print(f"‚ùå QueueManager initialization failed: {e}")
        return False
    
    try:
        todo_reader = TodoMasterReader()
        print("‚úÖ TodoMasterReader initialized")
    except Exception as e:
        print(f"‚ùå TodoMasterReader initialization failed: {e}")
        return False
    
    try:
        worker_processor = CollectiveWorkerProcessor(max_workers=4)  # Test with 4 workers
        print("‚úÖ CollectiveWorkerProcessor initialized")
    except Exception as e:
        print(f"‚ùå CollectiveWorkerProcessor initialization failed: {e}")
        return False
    
    try:
        task_engine = TaskBreakdownEngine()
        print("‚úÖ TaskBreakdownEngine initialized")
    except Exception as e:
        print(f"‚ùå TaskBreakdownEngine initialization failed: {e}")
        return False
    
    try:
        coordinator = DynamicWorkerCoordinator()
        print("‚úÖ DynamicWorkerCoordinator initialized")
    except Exception as e:
        print(f"‚ùå DynamicWorkerCoordinator initialization failed: {e}")
        return False
    
    try:
        monitor = CollectiveSystemMonitor()
        print("‚úÖ CollectiveSystemMonitor initialized")
    except Exception as e:
        print(f"‚ùå CollectiveSystemMonitor initialization failed: {e}")
        return False
    
    print("‚úÖ All components initialized successfully")
    return True

def test_todo_reading():
    """Test TODO reading functionality
    print("üîç Testing TODO reading...")
    
    try:
        reader = TodoMasterReader()
        
        # Test getting all TODOs
        all_todos = reader.get_all_todos()
        print(f"‚úÖ Found {len(all_todos)} TODOs")
        
        # Test getting pending TODOs
        pending_todos = reader.get_pending_todos()
        print(f"‚úÖ Found {len(pending_todos)} pending TODOs")
        
        return True
        
    except Exception as e:
        print(f"‚ùå TODO reading test failed: {e}")
        return False

def main():
    """Run all tests
    print("üöÄ Starting Quick System Test")
    print("=" * 50)
    
    tests = [
        ("Basic Imports", test_basic_imports),
        ("Component Initialization", test_component_initialization),
        ("TODO Reading", test_todo_reading)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PASSED")
            else:
                print(f"‚ùå {test_name}: FAILED")
        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! System is ready to run.")
        return True
    else:
        print("‚ö†Ô∏è  Some tests failed. System needs attention.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
